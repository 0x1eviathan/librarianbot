from api.database import db
from keyboards import main_menu_markup, close_message_markup, my_books_markup, my_book_markup, delete_my_book_markup

from main import user_router

from aiogram import types, F


# –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–Ω–∏–≥
@user_router.callback_query(F.data == 'my_books')
async def my_book_callback_handler(callback: types.CallbackQuery):
    chat_id = callback.from_user.id

    await callback.message.edit_text(
        text='<b> üë©üèª‚Äçüè´ –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –∫–Ω–∏–≥. </b>',
        reply_markup=my_books_markup(chat_id=chat_id)
    )


# –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–Ω–∏–≥ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
@user_router.callback_query(F.data.startswith('with_page_my_books'))
async def with_page_my_books_callback_handler(callback: types.CallbackQuery):
    page = int(callback.data.split(':')[1])

    chat_id = callback.from_user.id

    await callback.message.edit_text(
        text='<b> üë©üèª‚Äçüè´ –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –∫–Ω–∏–≥. </b>',
        reply_markup=my_books_markup(chat_id=chat_id, page=page)
    )


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–π –∫–Ω–∏–≥–µ
@user_router.callback_query(F.data.startswith('my_book'))
async def my_book_callback_handler(callback: types.CallbackQuery):
    book_id = callback.data.split(':')[1]
    page = callback.data.split(':')[2]

    my_book = db.get_my_book(book_id=book_id)

    book_name = my_book.book_name
    book_author = my_book.book_author
    book_description = my_book.book_description
    book_genre = my_book.book_genre

    await callback.message.edit_text(
        text=f'<b> üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–µ: </b> \n\n'
             f'<b> ‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_name} </b> \n'
             f'<b> ‚úçÔ∏è –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: {book_author} </b> \n'
             f'<b> üìÉ –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_description} </b> \n'
             f'<b> üîÆ –ñ–∞–Ω—Ä –∫–Ω–∏–≥–∏: {book_genre} </b>',
        reply_markup=my_book_markup(book_id=book_id, page=page)
    )


# –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥
@user_router.callback_query(F.data.startswith('delete_my_book'))
async def delete_my_book_callback_handler(callback: types.CallbackQuery):
    book_id = callback.data.split(':')[1]
    page = int(callback.data.split(':')[2])

    await callback.message.edit_text(
        text='<b> ‚ùå –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞? </b>',
        reply_markup=delete_my_book_markup(book_id, page)
    )


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
@user_router.callback_query(F.data.startswith('confirm_delete_my_book'))
async def confirm_delete_my_book_callback_handler(callback: types.CallbackQuery):
    book_id = callback.data.split(':')[1]

    db.delete_my_book(book_id=book_id)

    await callback.message.edit_text(
        text='<b> ‚ùå –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. </b>',
        reply_markup=close_message_markup()
    )

    username = callback.from_user.username

    await callback.message.answer(
        text=f'<b> üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É, @{username}! :) </b> \n\n'
             '<b> üóÉÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ—é - –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É. </b>',
        reply_markup=main_menu_markup()
    )

# –•–µ–Ω–¥–ª–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö –∫–Ω–∏–≥
@user_router.callback_query(F.data.startswith('pagination_my_books'))
async def pagination_my_books_callback_handler(callback: types.CallbackQuery):
    pagination_orientation = callback.data.split(':')[1]
    pagination_page = int(callback.data.split(':')[2])

    chat_id = callback.from_user.id

    if pagination_orientation == 'next':
        await callback.message.edit_reply_markup(
            reply_markup=my_books_markup(chat_id=chat_id, page=pagination_page + 1)
        )

    if pagination_orientation == 'back':
        await callback.message.edit_reply_markup(
            reply_markup=my_books_markup(chat_id=chat_id, page=pagination_page - 1)
        )
