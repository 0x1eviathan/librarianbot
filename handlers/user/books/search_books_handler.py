from api.database import db
from keyboards import (back_to_main_menu_markup, search_book_markup, search_books_markup, close_message_markup,
                       main_menu_markup)
from states import SearchBooks

from main import user_router

from aiogram import F, types
from aiogram.fsm.context import FSMContext


# –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –∑–∞–ø—Ä–æ—Å—É
@user_router.callback_query(F.data == 'search_books')
async def search_books_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    message = await callback.message.edit_text(
        text=f'<b> üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —è –Ω–∞–π–¥—É –í–∞–º –∫–Ω–∏–≥–∏ –≤ –í–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ! :) </b>',
        reply_markup=back_to_main_menu_markup()
    )

    message_id = message.message_id

    await state.update_data(message_id=message_id)

    await state.set_state(SearchBooks.key_word)


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
@user_router.callback_query(F.data.startswith('searched_book'))
async def my_book_callback_handler(callback: types.CallbackQuery):
    book_id = int(callback.data.split(':')[1])
    key_word = callback.data.split(':')[2]

    my_book = db.get_my_book(book_id=book_id)

    book_name = my_book.book_name
    book_author = my_book.book_author
    book_description = my_book.book_description
    book_genre = my_book.book_genre

    await callback.message.edit_text(
        text=f'<b> üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–µ: </b> \n\n'
             f'<b> ‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_name} </b> \n'
             f'<b> ‚úçÔ∏è –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: {book_author} </b> \n'
             f'<b> üìÉ –û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_description} </b> \n'
             f'<b> üîÆ –ñ–∞–Ω—Ä –∫–Ω–∏–≥–∏: {book_genre} </b>',
        reply_markup=search_book_markup(book_id=book_id, key_word=key_word)
    )


# –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º –ø–æ –∑–∞–ø—Ä–æ—Å—É
@user_router.callback_query(F.data.startswith('back_to_searched_books'))
async def back_to_searched_books_callback_handler(callback: types.CallbackQuery):
    key_word = callback.data.split(':')[1]

    chat_id = callback.from_user.id

    searched_books = db.get_searched_books(book_owner=chat_id, key_word=key_word)

    await callback.message.edit_text(
        text=f'<b> üîé –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–ª–µ–Ω —Å–Ω–∏–∑—É. :)</b>',
        reply_markup=search_books_markup(searched_books, key_word=key_word)
    )


# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö –∫–Ω–∏–≥
@user_router.callback_query(F.data.startswith('delete_searched_book'))
async def delete_searched_book_callback_handler(callback: types.CallbackQuery):
    book_id = callback.data.split(':')[1]
    key_word = callback.data.split(':')[2]

    db.delete_my_book(book_id=book_id)

    await callback.message.edit_text(
        text='<b> ‚ùå –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. </b>',
        reply_markup=close_message_markup()
    )

    chat_id = callback.from_user.id

    searched_books = db.get_searched_books(book_owner=chat_id, key_word=key_word)

    await callback.message.answer(
        text=f'<b> üîé –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–ª–µ–Ω —Å–Ω–∏–∑—É. :)</b>',
        reply_markup=search_books_markup(searched_books, key_word=key_word)
    )
